package com.example.shavvazymohamd;

import static com.example.shavvazymohamd.ActivityMalek.Name;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;
import androidx.work.ExistingPeriodicWorkPolicy;
import androidx.work.PeriodicWorkRequest;
import androidx.work.WorkManager;
import androidx.work.Worker;
import androidx.work.WorkerParameters;

import com.example.shavvazymohamd.Adapter.CustomAdapterAbyar;
import com.example.shavvazymohamd.Item.ItemAbyar;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;

/* loaded from: classes.dex */
public class ActivityAbyarr extends AppCompatActivity {
    ConstraintLayout ConstraintLayout;
    ArrayList<ItemAbyar> arrayItem;
    Button button6;
    ListView mList;
    ProgressDialog prgDialog;
    TextView text;
    TextView txtDayMonth;
    TextView txtYear;
    private SharedPreferences preferences;
    private SyncManager syncManager;

    @Override
    public void onCreate(Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.activity_abyarr);

       // UserManager.generateUserIdIfNotExists(this);
       // syncManager = new SyncManager();
       // syncManager.startServer(this);
       // syncManager.startSyncScheduler(this);

        preferences = getSharedPreferences(ActivityMalek.MyPref, MODE_PRIVATE);

        findViewById(R.id.btnsevenam).setOnClickListener(v -> showDataDialog());

        this.mList = (ListView) findViewById(R.id.listViewNames);
        this.arrayItem = new ArrayList<>();
        this.mList.setAdapter((ListAdapter) new CustomAdapterAbyar(this, this.arrayItem));
        this.mList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {
                // دریافت آیتم انتخاب شده
                ItemAbyar selectedItem = arrayItem.get(position);

                // دریافت اطلاعات از SharedPreferences
                String name = preferences.getString(Name, "");
                String family = preferences.getString(ActivityMalek.Family, "");
                String age = preferences.getString(ActivityMalek.Age, "");
                String sge = preferences.getString(ActivityMalek.Sge, "");


                String message = "نام: " + name + "\nروزآب: " + family + "\nدور روز: " + age + "\nدور شب: " + sge;

                new AlertDialog.Builder(ActivityAbyarr.this)
                        .setTitle("اطلاعات مالک ذخیره شده")
                        .setMessage(message)
                        .setPositiveButton("بستن", (dialog, which) -> dialog.dismiss())
                        .setNeutralButton("تایید", (dialog, which) -> {
                            selectedItem.setTxtName(name);
                            selectedItem.setTxtDate(family);
                            selectedItem.setTxtMessage(age);
                            // ذخیره اطلاعات در SharedPreferences
                            SharedPreferences.Editor editor = preferences.edit();
                            editor.putString("item_" + position + "_name", name);
                            editor.putString("item_" + position + "_family", family);
                            editor.putString("item_" + position + "_age", age);
                            editor.putString("item_" + position + "_sge", sge);
                            editor.apply();
                            dialog.cancel();

                        })
                        .setNegativeButton("حذف", (dialog, which) -> {
                            if (selectedItem != null) {
                                // حذف از SharedPreferences
                                SharedPreferences.Editor editor = preferences.edit();
                                editor.remove("item_" + position + "_name");
                                editor.remove("item_" + position + "_family");
                                editor.remove("item_" + position + "_age");
                                editor.remove("item_" + position + "_sge");
                                editor.apply();
                                selectedItem.setTxtName("");
                                selectedItem.setTxtDate("");
                                selectedItem.setTxtMessage("");
                                selectedItem.checkedTextView("");

                                // حذف از لیست (اگر از RecyclerView استفاده می‌کنید)
                                ActivityAbyarr.remove(); // حذف آیتم از لیست
                                ActivityAbyarr.notifyItemRemoved(); // به‌روزرسانی RecyclerView
                                Toast.makeText(ActivityAbyarr.this, "اطلاعات حذف شد", Toast.LENGTH_SHORT).show(); // نمایش پیام
                            }
                        })
                        .show();
            }
        });
      //  PushPole.initialize(this, true);
       // this.ConstraintLayout = (ConstraintLayout) findViewById(R.id.constraintLayout);

        Button button = (Button) findViewById(R.id.button6);
        this.button6 = button;
        button.setOnClickListener(new View.OnClickListener() {
            @Override // android.view.View.OnClickListener
            public void onClick(View view) {
                ActivityAbyarr.this.startActivity(new Intent(ActivityAbyarr.this, ActivityFelash.class));
                ActivityAbyarr.this.finish();
            }
        });
        ((Button) findViewById(R.id.button3)).setOnClickListener(new View.OnClickListener() {
            @Override // android.view.View.OnClickListener
            public void onClick(View view) {
                Intent intent = new Intent("android.intent.action.VIEW");
                intent.setData(Uri.parse("https://t.me/AndroidMApk"));
                ActivityAbyarr.this.startActivity(intent);
            }
        });
        ((Button) findViewById(R.id.buttonlist)).setOnClickListener(new View.OnClickListener() {
            @Override // android.view.View.OnClickListener
            public void onClick(View view) {
                ActivityAbyarr.this.startActivity(new Intent(ActivityAbyarr.this, ActivityMalek.class));
                ActivityAbyarr.this.finish();
            }
        });

        this.txtDayMonth = (TextView) findViewById(R.id.txt_day_month);
        this.txtYear = (TextView) findViewById(R.id.txt_year);
        this.text = (TextView) findViewById(R.id.text);
        //text.setText(getString(R.string.app_van));

        text.setText(getTextForToday());

        // برنامه‌ریزی برای به‌روزرسانی روزانه
        scheduleDailyWorker();

        if (this.text.getText().toString().equals(getString(R.string.app_van))) {
            van1();

        }
        if (this.text.getText().toString().equals(getString(R.string.app_too))) {
            van1();
        }
        if (this.text.getText().toString().equals(getString(R.string.app_ter))) {
            van1();
        }
        if (this.text.getText().toString().equals(getString(R.string.app_for))) {
            van1();
        }
        if (this.text.getText().toString().equals(getString(R.string.app_fav))) {
            van1();
        }
        if (this.text.getText().toString().equals(getString(R.string.app_six))) {
            van1();
        }
        if (this.text.getText().toString().equals(getString(R.string.app_svn))) {
            van1();
        }
        if (this.text.getText().toString().equals(getString(R.string.app_eig))) {
            van1();
        }
    }

    private static void notifyItemRemoved() {
    }

    private static void remove() {

    }

    private void showDataDialog() {
        String name = preferences.getString(Name, "");
        String family = preferences.getString(ActivityMalek.Family, "");
        String age = preferences.getString(ActivityMalek.Age, "");
        String sge = preferences.getString(ActivityMalek.Sge, "");

        String message = "نام: " + name + "\nروزآب: " + family + "\nدور روز: " + age + "\nدور شب: " + sge;

        new AlertDialog.Builder(this)
                .setTitle("اطلاعات مالک ذخیره شده")
                .setMessage(message)
                .setPositiveButton("بستن", (dialog, which) -> dialog.dismiss())
                .show();
    }

    public void van1() {
        // دریافت اطلاعات از SharedPreferences
        String name = preferences.getString(Name, "");
        String family = preferences.getString(ActivityMalek.Family, "");
        String age = preferences.getString(ActivityMalek.Age, "");
        String sge = preferences.getString(ActivityMalek.Sge, "");
        String format = new SimpleDateFormat("HH:mm").format(Calendar.getInstance().getTime());
        String string = getString(R.string.app_van);

        // اضافه کردن اولین آیتم با اطلاعات کاربر
        this.arrayItem.add(new ItemAbyar("avatar_a", name, family, age, format));

        // استفاده از حلقه برای اضافه کردن آیتم‌های تکراری
        for (int i = 2; i <= 24; i++) {
            this.arrayItem.add(new ItemAbyar("avatar_a", "بدون نام", i + ":00", string, format));
        }
    }

    @Override
    protected void onResume() {
        super.onResume();

        // بارگذاری اطلاعات ذخیره شده برای هر آیتم
        for (int i = 0; i < arrayItem.size(); i++) {
            ItemAbyar item = arrayItem.get(i);

            String name = preferences.getString("item_" + i + "_name", "");
            String family = preferences.getString("item_" + i + "_family", "");
            String age = preferences.getString("item_" + i + "_age", "");
            String sge = preferences.getString("item_" + i + "_sge", "");

            if (!name.isEmpty()) {
                item.setTxtName(name);
                item.setTxtDate(family);
                item.setTxtMessage(age);
                item.checkedTextView(sge);
            }


        }

        // به‌روزرسانی لیست
        ((CustomAdapterAbyar) mList.getAdapter()).notifyDataSetChanged();
    }
    @Override // androidx.activity.ComponentActivity, android.app.Activity
    public void onBackPressed() {
        super.onBackPressed();
        startActivity(new Intent(this, ActivityShavvaz.class));
        finish();
    }

    private String getTextForToday() {
        return DailyTextWorker.getTextForToday(this);
    }

    private void scheduleDailyWorker() {
        WorkManager workManager = WorkManager.getInstance(this);

        // محاسبه زمان باقی‌مانده تا ساعت ۱۸:۰۰
        Calendar now = Calendar.getInstance();
        Calendar next18 = Calendar.getInstance();
        next18.set(Calendar.HOUR_OF_DAY, 18);
        next18.set(Calendar.MINUTE, 0);
        next18.set(Calendar.SECOND, 0);

        if (now.after(next18)) {
            next18.add(Calendar.DAY_OF_YEAR, 1); // تنظیم برای روز بعد
        }

        long initialDelay = next18.getTimeInMillis() - now.getTimeInMillis();

        PeriodicWorkRequest dailyWork = new PeriodicWorkRequest.Builder(
                DailyTextWorker.class,
                1, TimeUnit.DAYS)
                .setInitialDelay(initialDelay, TimeUnit.MILLISECONDS)
                .build();

        workManager.enqueueUniquePeriodicWork(
                "daily_text_work",
                ExistingPeriodicWorkPolicy.REPLACE,
                dailyWork
        );
    }

    @Override
    protected void onStart() {
        super.onStart();

        // ثبت BroadcastReceiver برای دریافت متن‌های جدید
        LocalBroadcastManager.getInstance(this).registerReceiver(updateTextReceiver, new IntentFilter("UPDATE_DAILY_TEXT"));
    }

    @Override
    protected void onStop() {
        super.onStop();

        // لغو ثبت BroadcastReceiver
        LocalBroadcastManager.getInstance(this).unregisterReceiver(updateTextReceiver);
    }

    private final BroadcastReceiver updateTextReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String dailyText = intent.getStringExtra("daily_text");
            text.setText(dailyText);
        }
    };

    // کلاس داخلی برای DailyTextWorker
    public static class DailyTextWorker extends Worker {

        public DailyTextWorker(@NonNull Context context, @NonNull WorkerParameters workerParams) {
            super(context, workerParams);
        }

        @NonNull
        @Override
        public Result doWork() {
            // محاسبه متن امروز
            String todayText = getTextForToday(getApplicationContext());

            // ارسال متن به MainActivity
            Intent intent = new Intent("UPDATE_DAILY_TEXT");
            intent.putExtra("daily_text", todayText);
            LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);

            return Result.success();
        }

        // متد برای محاسبه متن امروز
        public static String getTextForToday(Context context) {
            Calendar calendar = Calendar.getInstance();
            Calendar startDate = Calendar.getInstance();
            startDate.set(2025, Calendar.JANUARY, 1); // شروع از اول ژانویه ۲۰۲۵

            // محاسبه اختلاف روزها از اول ژانویه ۲۰۲۵
            long diffInMillis = calendar.getTimeInMillis() - startDate.getTimeInMillis();
            int dayIndex = (int) (diffInMillis / (1000 * 60 * 60 * 24)) % 8; // محاسبه ایندکس روز (0 تا 7)

            // فراخوانی متن مربوطه از strings.xml
            switch (dayIndex) {
                case 0:
                    return context.getString(R.string.app_van);
                case 1:
                    return context.getString(R.string.app_too);
                case 2:
                    return context.getString(R.string.app_ter);
                case 3:
                    return context.getString(R.string.app_for);
                case 4:
                    return context.getString(R.string.app_fav);
                case 5:
                    return context.getString(R.string.app_six);
                case 6:
                    return context.getString(R.string.app_svn);
                case 7:
                    return context.getString(R.string.app_eig);
                default:
                    return context.getString(R.string.app_van); // حالت پیش‌فرض

            }
        }
    }
}
